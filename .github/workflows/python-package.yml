# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Ex1 (${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest"]
        python-version: ["3.10", "3.11", "3.12"]

    defaults:
      run:
        shell: bash -l {0}

    steps:
      - uses: actions/checkout@v3
      - name: Cache conda
        uses: actions/cache@v3
        env:
          CACHE_NUMBER: 0
        with:
          path: ~/conda_pkgs_dir
          key:
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{
            hashFiles('conda/environment.yml') }}
      - name: Set installer URL
        id: set-installer-url
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            echo "installer-url=https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh" >> $GITHUB_ENV
          fi
      - uses: conda-incubator/setup-miniconda@v2
        with:
          installer-url: ${{ env.installer-url }}
          python-version: ${{ matrix.python-version }}
          channels: conda-forge, bioconda, defaults
          channel-priority: true
          activate-environment: tallytrin
          environment-file: conda/environment.yml
      - name: Show conda
        run: |
          conda info
          conda list
          mamba list

      - name: Install tallytrin
        run: pip install -e .
      - name: Lint with flake8
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8 pytest pep8 nose
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest
        run: |
          pytest -v tests/test_import.py
          pytest -v tests/test_style.py
          pytest -v tests/test_pipeline_control.py
