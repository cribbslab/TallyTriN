"""===========================
Pipeline count
===========================

Overview
========

The aim of this pipeline is to take a nanopore input fastq and then process
the file so a counts matrix is generated for downstream differential expression.

Usage
=====

See :ref:`PipelineSettingUp` and :ref:`PipelineRunning` on general
information how to use CGAT pipelines.

Configuration
-------------

The pipeline requires a configured :file:`pipeline.yml` file.
CGATReport report requires a :file:`conf.py` and optionally a
:file:`cgatreport.ini` file (see :ref:`PipelineReporting`).

Default configuration files can be generated by executing:

   python <srcdir>/pipeline_cat_fastq.py config

Input files
-----------

fastq.gz file of nanopore reads that have been sequenced with trimers at
the 5' and 3' end. Data should be added to the data.dir folder.

Pipeline output
===============

A counts matrix with sample as columns and rows as either transcripts or genes. 


Code
====

"""
import sys
import os
import pysam
from ruffus import *
import cgatcore.iotools as iotools
import cgatcore.pipeline as P
import cgatcore.experiment as E
from cgatcore.pipeline import cluster_runnable

# load options from the config file
PARAMS = P.get_parameters(
    ["%s/pipeline.yml" % os.path.splitext(__file__)[0],
     "../pipeline.yml",
     "pipeline.yml"])


SEQUENCESUFFIXES = ("*.fastq.gz")

FASTQTARGET = tuple([os.path.join("data.dir/", suffix_name)
                       for suffix_name in SEQUENCESUFFIXES])

@transform(FASTQTARGET,
         regex("data.dir/(\S+).fastq.gz"),
         r"\1_polyA.fastq.gz")
def polya_correct(infile, outfile):
    '''filter less than 300 bp reads and then make sure polyA is in correct orientation'''

    PYTHON_ROOT = os.path.join(os.path.dirname(__file__), "python/")

    statement = '''python %(PYTHON_ROOT)s/complement_polyA.py --infile=%(infile)s --outname=%(outfile)s'''

    P.run(statement)

@transform(polya_correct,
         regex("(\S+)_polyA.fastq.gz"),
         r"\1_tso_UMI.fastq.gz")
def tso_umi(infile, outfile):
    '''Identify the tso umi for each read'''

    PYTHON_ROOT = os.path.join(os.path.dirname(__file__), "python/")

    statement = '''python %(PYTHON_ROOT)s/tso_umi.py --infile=%(infile)s --outname=%(outfile)s'''

    P.run(statement)


@transform(tso_umi,
         regex("(\S+)_tso_UMI.fastq.gz"),
         r"\1_tso_polya_UMI.fastq.gz")
def polya_umi(infile, outfile):
    '''Identify the polya umi for each read'''

    PYTHON_ROOT = os.path.join(os.path.dirname(__file__), "python/")

    statement = '''python %(PYTHON_ROOT)s/polya_umi.py --infile=%(infile)s --outname=%(outfile)s'''

    P.run(statement)


@follows(polya_correct)
def full():
    pass

def main(argv=None):
    if argv is None:
        argv = sys.argv
    P.main(argv)


if __name__ == "__main__":
    sys.exit(P.main(sys.argv))    
